const logger = require('../../utils/logger');
const ScoringAlgorithms = require('./ScoringAlgorithms');

class StrategicRecommendationEngine {
  constructor() {
    this.scoringEngine = new ScoringAlgorithms();
    this.decisionThresholds = {
      participar: 75,      // Score >= 75: Recomenda participar
      analisar_mais: 60,   // Score 60-74: Analisar mais detalhadamente
      nao_participar: 60   // Score < 60: N√£o recomenda participar
    };
  }

  /**
   * Gera recomenda√ß√£o estrat√©gica completa para um edital
   */
  async generateStrategicRecommendation(editalData, empresaProfile = null, analiseIA = null) {
    try {
      logger.info(`üéØ Gerando recomenda√ß√£o estrat√©gica para edital ${editalData.numero_edital}`);

      // Calcular scores detalhados
      const scores = this.scoringEngine.calculateAllScores(editalData, empresaProfile);

      // Gerar decis√£o principal
      const decisao = this.generateDecision(scores, editalData, empresaProfile);

      // Gerar estrat√©gias espec√≠ficas
      const estrategias = this.generateParticipationStrategies(editalData, empresaProfile, scores, analiseIA);

      // Gerar plano de a√ß√£o
      const planoAcao = this.generateActionPlan(editalData, empresaProfile, decisao, scores);

      // Gerar an√°lise de precifica√ß√£o
      const precificacao = this.generatePricingStrategy(editalData, empresaProfile, scores);

      // Gerar recomenda√ß√µes de parcerias
      const parcerias = this.generatePartnershipRecommendations(editalData, empresaProfile, scores);

      // Gerar cronograma estrat√©gico
      const cronograma = this.generateStrategicTimeline(editalData, decisao);

      // Calcular ROI estimado
      const roiAnalysis = this.calculateROIAnalysis(editalData, empresaProfile, scores);

      const recomendacao = {
        // Decis√£o principal
        decisao_recomendada: decisao.recomendacao,
        confianca_decisao: decisao.confianca,
        justificativa_principal: decisao.justificativa,

        // Scores detalhados
        scores: scores,
        fatores_decisivos: decisao.fatores_decisivos,

        // Estrat√©gias
        estrategia_participacao: estrategias.estrategia_principal,
        estrategias_alternativas: estrategias.alternativas,
        vantagens_competitivas: estrategias.vantagens,

        // Plano de a√ß√£o
        acoes_imediatas: planoAcao.imediatas,
        acoes_preparacao: planoAcao.preparacao,
        acoes_pos_decisao: planoAcao.pos_decisao,

        // Precifica√ß√£o
        estrategia_precificacao: precificacao.estrategia,
        margem_recomendada: precificacao.margem,
        preco_competitivo: precificacao.preco_sugerido,
        fatores_precificacao: precificacao.fatores,

        // Parcerias
        necessidade_parceria: parcerias.necessaria,
        tipos_parceria: parcerias.tipos,
        criterios_selecao: parcerias.criterios,

        // Cronograma
        cronograma_estrategico: cronograma,

        // An√°lise financeira
        roi_estimado: roiAnalysis.roi_percentual,
        retorno_investimento: roiAnalysis.retorno_valor,
        periodo_retorno: roiAnalysis.periodo_meses,
        analise_financeira: roiAnalysis.detalhes,

        // Metadados
        data_analise: new Date().toISOString(),
        versao_engine: '1.0',
        prioridade: this.calculatePriority(scores, decisao, roiAnalysis)
      };

      logger.info(`‚úÖ Recomenda√ß√£o estrat√©gica gerada: ${decisao.recomendacao}`);
      return recomendacao;

    } catch (error) {
      logger.error('Erro ao gerar recomenda√ß√£o estrat√©gica:', error);
      throw error;
    }
  }

  /**
   * Gera decis√£o principal baseada nos scores
   */
  generateDecision(scores, editalData, empresaProfile) {
    const scoreFinal = scores.final;
    let recomendacao, confianca, justificativa;
    const fatoresDecisivos = [];

    // Determinar recomenda√ß√£o baseada no score
    if (scoreFinal >= this.decisionThresholds.participar) {
      recomendacao = 'participar';
      confianca = Math.min(95, 60 + (scoreFinal - 75));
      justificativa = 'Edital apresenta alta viabilidade e adequa√ß√£o ao perfil da empresa';
    } else if (scoreFinal >= this.decisionThresholds.analisar_mais) {
      recomendacao = 'analisar_mais';
      confianca = 40 + (scoreFinal - 60);
      justificativa = 'Edital requer an√°lise mais detalhada antes da decis√£o final';
    } else {
      recomendacao = 'nao_participar';
      confianca = 60 + (60 - scoreFinal);
      justificativa = 'Edital n√£o apresenta viabilidade adequada para participa√ß√£o';
    }

    // Identificar fatores decisivos
    Object.entries(scores).forEach(([fator, score]) => {
      if (fator === 'final') return;

      if (score >= 80) {
        fatoresDecisivos.push({
          fator: fator,
          impacto: 'positivo',
          score: score,
          descricao: this.getFactorDescription(fator, score, 'positivo')
        });
      } else if (score <= 40) {
        fatoresDecisivos.push({
          fator: fator,
          impacto: 'negativo',
          score: score,
          descricao: this.getFactorDescription(fator, score, 'negativo')
        });
      }
    });

    // Ajustar confian√ßa baseado em fatores cr√≠ticos
    const fatoresNegativos = fatoresDecisivos.filter(f => f.impacto === 'negativo');
    if (fatoresNegativos.length > 2) {
      confianca = Math.max(30, confianca - 20);
    }

    return {
      recomendacao,
      confianca: Math.round(confianca),
      justificativa,
      fatores_decisivos: fatoresDecisivos
    };
  }

  /**
   * Gera estrat√©gias de participa√ß√£o
   */
  generateParticipationStrategies(editalData, empresaProfile, scores, analiseIA) {
    const estrategias = {
      estrategia_principal: '',
      alternativas: [],
      vantagens: []
    };

    // Estrat√©gia principal baseada nos scores dominantes
    const scoresDominantes = Object.entries(scores)
      .filter(([key]) => key !== 'final')
      .sort(([,a], [,b]) => b - a)
      .slice(0, 2);

    const [melhorFator] = scoresDominantes[0];

    switch (melhorFator) {
      case 'financeiro':
        estrategias.estrategia_principal = 'Estrat√©gia de Competitividade por Pre√ßo';
        estrategias.alternativas.push('Destacar experi√™ncia em projetos similares com boa rela√ß√£o custo-benef√≠cio');
        break;
      case 'tecnico':
        estrategias.estrategia_principal = 'Estrat√©gia de Diferencia√ß√£o T√©cnica';
        estrategias.alternativas.push('Propor solu√ß√µes inovadoras que agreguem valor al√©m do solicitado');
        break;
      case 'documental':
        estrategias.estrategia_principal = 'Estrat√©gia de Conformidade Exemplar';
        estrategias.alternativas.push('Preparar documenta√ß√£o impec√°vel para ganhar pontos na habilita√ß√£o');
        break;
      case 'prazo':
        estrategias.estrategia_principal = 'Estrat√©gia de Agilidade na Entrega';
        estrategias.alternativas.push('Propor cronograma otimizado com entregas antecipadas');
        break;
      case 'concorrencia':
        estrategias.estrategia_principal = 'Estrat√©gia de Posicionamento √önico';
        estrategias.alternativas.push('Explorar nichos espec√≠ficos onde h√° menor concorr√™ncia');
        break;
      default:
        estrategias.estrategia_principal = 'Estrat√©gia Balanceada';
    }

    // Identificar vantagens competitivas
    if (scores.tecnico > 70) {
      estrategias.vantagens.push('Forte capacidade t√©cnica para execu√ß√£o');
    }
    if (scores.financeiro > 70) {
      estrategias.vantagens.push('Proposta financeiramente competitiva');
    }
    if (scores.documental > 80) {
      estrategias.vantagens.push('Facilidade na habilita√ß√£o documental');
    }
    if (editalData.permite_me_epp && empresaProfile?.porte_empresa === 'pequena') {
      estrategias.vantagens.push('Benef√≠cios de ME/EPP aplic√°veis');
    }

    return estrategias;
  }

  /**
   * Gera plano de a√ß√£o estruturado
   */
  generateActionPlan(editalData, empresaProfile, decisao, scores) {
    const dataAbertura = new Date(editalData.data_abertura);
    const hoje = new Date();
    const diasParaAbertura = Math.ceil((dataAbertura - hoje) / (1000 * 60 * 60 * 24));

    const plano = {
      imediatas: [],
      preparacao: [],
      pos_decisao: []
    };

    // A√ß√µes imediatas (primeiros 2-3 dias)
    if (decisao.recomendacao === 'participar' || decisao.recomendacao === 'analisar_mais') {
      plano.imediatas.push('Baixar e analisar detalhadamente o edital completo');
      plano.imediatas.push('Verificar disponibilidade da equipe t√©cnica para o per√≠odo');
      plano.imediatas.push('Consultar documenta√ß√£o necess√°ria para habilita√ß√£o');

      if (diasParaAbertura <= 10) {
        plano.imediatas.push('URGENTE: Iniciar prepara√ß√£o da documenta√ß√£o imediatamente');
      }
    }

    // A√ß√µes de prepara√ß√£o (at√© a abertura)
    if (decisao.recomendacao === 'participar') {
      plano.preparacao.push('Elaborar proposta t√©cnica detalhada');
      plano.preparacao.push('Calcular proposta de pre√ßos competitiva');
      plano.preparacao.push('Reunir e organizar documentos de habilita√ß√£o');
      plano.preparacao.push('Validar proposta com equipe t√©cnica e jur√≠dica');

      if (scores.tecnico < 70) {
        plano.preparacao.push('Buscar parcerias t√©cnicas para fortalecer a proposta');
      }

      if (scores.financeiro < 60) {
        plano.preparacao.push('Revisar estrutura de custos para melhorar competitividade');
      }
    }

    // A√ß√µes p√≥s-decis√£o
    if (decisao.recomendacao === 'participar') {
      plano.pos_decisao.push('Enviar proposta dentro do prazo estabelecido');
      plano.pos_decisao.push('Acompanhar processo licitat√≥rio e poss√≠veis recursos');
      plano.pos_decisao.push('Preparar equipe para eventual in√≠cio do projeto');
    } else if (decisao.recomendacao === 'analisar_mais') {
      plano.pos_decisao.push('Buscar informa√ß√µes adicionais sobre o edital');
      plano.pos_decisao.push('Consultar outros participantes do mercado');
      plano.pos_decisao.push('Reavaliar decis√£o com base em novas informa√ß√µes');
    }

    return plano;
  }

  /**
   * Gera estrat√©gia de precifica√ß√£o
   */
  generatePricingStrategy(editalData, empresaProfile, scores) {
    const valorEstimado = editalData.valor_estimado || 0;

    let estrategia = '';
    let margem = 15; // Margem padr√£o de 15%
    let precoSugerido = 0;
    const fatores = [];

    // Determinar estrat√©gia baseada nos scores
    if (scores.concorrencia > 70) {
      estrategia = 'Precifica√ß√£o Competitiva';
      margem = 10; // Margem menor para ser mais competitivo
      fatores.push('Baixa concorr√™ncia permite margem otimizada');
    } else if (scores.concorrencia < 50) {
      estrategia = 'Precifica√ß√£o Premium';
      margem = 8; // Margem muito baixa devido √† alta concorr√™ncia
      fatores.push('Alta concorr√™ncia exige pre√ßo mais agressivo');
    } else {
      estrategia = 'Precifica√ß√£o Balanceada';
      margem = 12;
      fatores.push('Concorr√™ncia moderada permite margem equilibrada');
    }

    // Ajustar margem baseada no score t√©cnico
    if (scores.tecnico > 80) {
      margem += 3;
      fatores.push('Alta capacidade t√©cnica justifica margem adicional');
    }

    // Ajustar margem baseada no valor do contrato
    if (valorEstimado > 500000) {
      margem -= 2;
      fatores.push('Valor alto do contrato requer margem mais conservadora');
    }

    // Calcular pre√ßo sugerido
    if (valorEstimado > 0) {
      const custoEstimado = valorEstimado * 0.75; // Assumir que 75% do valor √© custo
      precoSugerido = custoEstimado * (1 + margem / 100);
    }

    return {
      estrategia,
      margem,
      preco_sugerido: Math.round(precoSugerido),
      fatores
    };
  }

  /**
   * Gera recomenda√ß√µes de parcerias
   */
  generatePartnershipRecommendations(editalData, empresaProfile, scores) {
    const recomendacoes = {
      necessaria: false,
      tipos: [],
      criterios: []
    };

    // Avaliar necessidade de parceria
    if (scores.tecnico < 60) {
      recomendacoes.necessaria = true;
      recomendacoes.tipos.push('Parceria T√©cnica');
      recomendacoes.criterios.push('Buscar empresa com expertise espec√≠fica no objeto do edital');
    }

    if (scores.financeiro < 50 && editalData.valor_estimado > 300000) {
      recomendacoes.necessaria = true;
      recomendacoes.tipos.push('Parceria Financeira');
      recomendacoes.criterios.push('Buscar parceiro com capacidade financeira para o projeto');
    }

    if (scores.documental < 60) {
      recomendacoes.tipos.push('Consultoria Jur√≠dica');
      recomendacoes.criterios.push('Contratar consultoria especializada em licita√ß√µes');
    }

    const objeto = (editalData.objeto || '').toLowerCase();
    if (objeto.includes('nacional') || objeto.includes('m√∫ltiplas localidades')) {
      recomendacoes.tipos.push('Parceria Regional');
      recomendacoes.criterios.push('Buscar parceiro com presen√ßa nacional ou regional');
    }

    if (editalData.participacao_consorcio) {
      recomendacoes.tipos.push('Cons√≥rcio');
      recomendacoes.criterios.push('Formar cons√≥rcio com empresa complementar');
    }

    return recomendacoes;
  }

  /**
   * Gera cronograma estrat√©gico
   */
  generateStrategicTimeline(editalData, decisao) {
    const dataAbertura = new Date(editalData.data_abertura);
    const hoje = new Date();
    const diasParaAbertura = Math.ceil((dataAbertura - hoje) / (1000 * 60 * 60 * 24));

    const cronograma = [];

    if (decisao.recomendacao === 'participar') {
      const marcos = [
        { atividade: 'An√°lise completa do edital', prazo: Math.max(1, Math.ceil(diasParaAbertura * 0.1)) },
        { atividade: 'Prepara√ß√£o da documenta√ß√£o', prazo: Math.max(2, Math.ceil(diasParaAbertura * 0.3)) },
        { atividade: 'Elabora√ß√£o da proposta t√©cnica', prazo: Math.max(3, Math.ceil(diasParaAbertura * 0.4)) },
        { atividade: 'C√°lculo da proposta financeira', prazo: Math.max(1, Math.ceil(diasParaAbertura * 0.1)) },
        { atividade: 'Revis√£o e valida√ß√£o final', prazo: Math.max(1, Math.ceil(diasParaAbertura * 0.1)) }
      ];

      let acumulado = 0;
      marcos.forEach(marco => {
        const dataInicio = new Date(hoje);
        dataInicio.setDate(dataInicio.getDate() + acumulado);
        const dataFim = new Date(dataInicio);
        dataFim.setDate(dataFim.getDate() + marco.prazo);

        cronograma.push({
          atividade: marco.atividade,
          data_inicio: dataInicio.toISOString().split('T')[0],
          data_fim: dataFim.toISOString().split('T')[0],
          dias_duracao: marco.prazo
        });

        acumulado += marco.prazo;
      });
    }

    return cronograma;
  }

  /**
   * Calcula an√°lise de ROI
   */
  calculateROIAnalysis(editalData, empresaProfile, scores) {
    const valorContrato = editalData.valor_estimado || 0;

    // Estimar custos baseado no score financeiro
    let custoEstimado = valorContrato * 0.75; // Base: 75% do valor √© custo

    if (scores.tecnico < 60) {
      custoEstimado *= 1.1; // +10% por complexidade t√©cnica
    }

    if (scores.prazo < 60) {
      custoEstimado *= 1.05; // +5% por press√£o de prazo
    }

    const margemEstimada = valorContrato - custoEstimado;
    const roiPercentual = valorContrato > 0 ? (margemEstimada / custoEstimado) * 100 : 0;

    // Estimar per√≠odo de retorno (baseado no prazo de execu√ß√£o)
    const prazoExecucao = this.scoringEngine.extractExecutionTimeInDays(editalData.prazo_execucao);
    const periodoRetorno = Math.max(1, Math.ceil(prazoExecucao / 30)); // Converter para meses

    return {
      roi_percentual: Math.round(roiPercentual * 100) / 100,
      retorno_valor: Math.round(margemEstimada),
      periodo_meses: periodoRetorno,
      detalhes: {
        valor_contrato: valorContrato,
        custo_estimado: Math.round(custoEstimado),
        margem_estimada: Math.round(margemEstimada),
        risco_financeiro: scores.risco < 60 ? 'Alto' : scores.risco > 80 ? 'Baixo' : 'M√©dio'
      }
    };
  }

  /**
   * Calcula prioridade geral do edital
   */
  calculatePriority(scores, decisao, roiAnalysis) {
    let prioridade = scores.final;

    // Ajustar baseado no ROI
    if (roiAnalysis.roi_percentual > 25) {
      prioridade += 10;
    } else if (roiAnalysis.roi_percentual < 10) {
      prioridade -= 10;
    }

    // Ajustar baseado na decis√£o
    if (decisao.recomendacao === 'participar' && decisao.confianca > 80) {
      prioridade += 5;
    }

    if (prioridade >= 80) return 'alta';
    if (prioridade >= 60) return 'm√©dia';
    return 'baixa';
  }

  /**
   * Gera descri√ß√£o para fatores decisivos
   */
  getFactorDescription(fator, score, impacto) {
    const descriptions = {
      financeiro: {
        positivo: 'Excelente viabilidade financeira e adequa√ß√£o de valor',
        negativo: 'Quest√µes financeiras podem comprometer a viabilidade'
      },
      tecnico: {
        positivo: 'Forte adequa√ß√£o t√©cnica √†s capacidades da empresa',
        negativo: 'Complexidade t√©cnica acima das capacidades atuais'
      },
      documental: {
        positivo: 'Documenta√ß√£o necess√°ria facilmente atend√≠vel',
        negativo: 'Documenta√ß√£o exigida apresenta dificuldades significativas'
      },
      prazo: {
        positivo: 'Prazos adequados e bem distribu√≠dos',
        negativo: 'Prazos apertados ou inadequados para execu√ß√£o'
      },
      risco: {
        positivo: 'Baixo n√≠vel de risco identificado',
        negativo: 'Alto n√≠vel de risco pode comprometer o projeto'
      },
      concorrencia: {
        positivo: 'Baixa concorr√™ncia esperada, boa chance de sucesso',
        negativo: 'Alta concorr√™ncia pode reduzir chances de sucesso'
      }
    };

    return descriptions[fator]?.[impacto] || 'Fator relevante para a decis√£o';
  }
}

module.exports = StrategicRecommendationEngine;